{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","api/api.js","components/FindMovie/FindMovie.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","key","imdbId","getMovie","a","fetch","json","FindMovie","addToList","isOnList","setExistence","useState","movieTitle","setMovieTitle","foundMovie","getFoundMovie","isMovieExist","setMovieExistence","getMovieFromApi","Response","Title","Plot","Poster","imdbID","htmlFor","value","type","id","placeholder","autoComplete","cn","onChange","event","target","onClick","disabled","App","data","moviesList","refreshMoviesList","isMovieOnList","some","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9f16ffef.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({\n  title,\n  description = '',\n  imgUrl,\n  imdbUrl,\n}) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          src={imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport PropTypes from 'prop-types';\nimport { MovieCard } from '../MovieCard';\n\nexport const MoviesList = ({\n  movies = [],\n}) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard key={movie.imdbId} {...movie} />\n    ))}\n  </div>\n);\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      imdbId: PropTypes.string.isRequired,\n    }).isRequired,\n  ).isRequired,\n};\n","const MOVIES_API = `https://www.omdbapi.com/?i=tt3896198&apikey=4b6ca699&t=`;\n\nexport const getMovie = async(title) => {\n  const movie = await fetch(`${MOVIES_API}${title}`);\n\n  return movie.json();\n};\n","import React, { useState } from 'react';\nimport './FindMovie.scss';\n\nimport cn from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport { MovieCard } from '../MovieCard';\n\nimport { getMovie } from '../../api/api';\n\nexport const FindMovie = ({\n  addToList,\n  isOnList,\n  setExistence,\n}) => {\n  const [movieTitle, setMovieTitle] = useState('');\n  const [foundMovie, getFoundMovie] = useState('');\n  const [isMovieExist, setMovieExistence] = useState(true);\n\n  const catchTitleForMovie = (title) => {\n    setMovieTitle(title);\n    setMovieExistence(true);\n    setExistence(false);\n  };\n\n  const getMovieFromApi = async() => {\n    const movie = await getMovie(movieTitle);\n\n    if (!movieTitle) {\n      setMovieExistence(false);\n\n      return;\n    }\n\n    if (movie.Response === 'False') {\n      setMovieExistence(false);\n      setMovieTitle('');\n\n      return;\n    }\n\n    getFoundMovie({\n      title: movie.Title,\n      description: movie.Plot,\n      imgUrl: movie.Poster,\n      imdbUrl: `https://www.imdb.com/title/${movie.imdbID}/`,\n      imdbId: movie.imdbID,\n    });\n    setMovieTitle('');\n  };\n\n  const addMovieToList = () => {\n    addToList(foundMovie);\n    getFoundMovie('');\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\">\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              value={movieTitle}\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              autoComplete=\"off\"\n              className={cn('input', {\n                'is-danger': !isMovieExist || isOnList,\n              })}\n              onChange={event => catchTitleForMovie(event.target.value)}\n            />\n          </div>\n\n          {!isMovieExist && (\n            <p className=\"help is-danger\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n\n          {isOnList && (\n            <p className=\"help is-danger\">\n              The film has been already added to the list\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-light\"\n              onClick={getMovieFromApi}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              onClick={addMovieToList}\n              disabled={!foundMovie}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      {foundMovie && (\n        <div className=\"container\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard {...foundMovie} />\n        </div>\n      )}\n    </>\n  );\n};\n\nFindMovie.propTypes = {\n  addToList: PropTypes.func.isRequired,\n  isOnList: PropTypes.bool.isRequired,\n  setExistence: PropTypes.func.isRequired,\n  movie: PropTypes.shape({\n    Title: PropTypes.string.isRequired,\n    Plot: PropTypes.string.isRequired,\n    Poster: PropTypes.string.isRequired,\n    imdbID: PropTypes.string.isRequired,\n  }).isRequired,\n};\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\n\nexport const App = () => {\n  const [moviesList, refreshMoviesList] = useState(data);\n  const [isMovieOnList, setMovieExistence] = useState(false);\n\n  const addToMoviesList = (foundMovie) => {\n    const isAlreadyOnList = moviesList.some(\n      movie => movie.imdbId === foundMovie.imdbId,\n    );\n\n    if (isAlreadyOnList) {\n      setMovieExistence(true);\n\n      return;\n    }\n\n    refreshMoviesList([\n      ...moviesList,\n      foundMovie,\n    ]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={moviesList} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie\n          addToList={addToMoviesList}\n          isOnList={isMovieOnList}\n          setExistence={setMovieExistence}\n        />\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}